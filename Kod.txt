import tkinter as tk
import math
from tkinter import messagebox
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
root = tk.Tk()
root.title("üé´ –°–ø–∏—á–µ—á–Ω—ã–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏")
root.geometry("500x500")
root.attributes('-fullscreen', True)  # –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–º—ã
current_theme = "dark"

# –¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
themes = {
    "dark": {
        "bg_color": "#202020",
        "fg_color": "#FFFFFF",
        "canvas_bg": "#404040",
        "button_bg": "#FFA500",
        "button_exit_bg": "#FF4500",
    },
    "light": {
        "bg_color": "#FFFFFF",
        "fg_color": "#000000",
        "canvas_bg": "#DDDDDD",
        "button_bg": "#1E90FF",
        "button_exit_bg": "#FF4500",  # –¶–≤–µ—Ç –≤—ã—Ö–æ–¥–∞ –≤—Å–µ–≥–¥–∞ –∫—Ä–∞—Å–Ω—ã–π
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Ç–µ–º—ã


def switch_theme():
    global current_theme
    current_theme = "light" if current_theme == "dark" else "dark"
    apply_theme()

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã


def apply_theme():
    theme = themes[current_theme]
    root.configure(bg=theme["bg_color"])
    canvas.configure(bg=theme["canvas_bg"])
    message_label.configure(bg=theme["bg_color"], fg=theme["fg_color"])
    restart_button.configure(bg=theme["button_bg"], fg=theme["fg_color"])
    exit_button_in_game.configure(
        bg=theme["button_exit_bg"], fg=theme["fg_color"])
    if welcome_window is not None:
        welcome_window.configure(bg=theme["bg_color"])
        for widget in welcome_window.winfo_children():
            if isinstance(widget, tk.Button):
                if widget.cget("text") == "–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã":
                    widget.configure(bg="#FF4500", fg="#FFFFFF")
                else:
                    widget.configure(
                        bg=theme["button_bg"], fg=theme["fg_color"])
            else:
                widget.configure(bg=theme["bg_color"], fg=theme["fg_color"])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞


def exit_fullscreen(event):
    root.attributes('-fullscreen', False)


# –ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
root.bind("<Escape>", exit_fullscreen)

# –ú–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è


def show_welcome_menu():
    global welcome_window
    if welcome_window is not None:
        welcome_window.destroy()
    welcome_window = tk.Frame(root, bg=themes[current_theme]["bg_color"])
    welcome_window.place(relwidth=1, relheight=1)

    welcome_label = tk.Label(welcome_window, text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–ø–∏—á–µ—á–Ω—ã–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏!",
                             bg=themes[current_theme]["bg_color"], fg=themes[current_theme]["fg_color"], font=("Comic Sans MS", 18, "bold italic"))
    welcome_label.pack(pady=20)

    instructions_label = tk.Label(welcome_window, text="–¶–µ–ª—å –∏–≥—Ä—ã - —Å–æ–∑–¥–∞—Ç—å 5 –∫–≤–∞–¥—Ä–∞—Ç–æ–≤, –ø–µ—Ä–µ–º–µ—Å—Ç–∏–≤ –æ–¥–Ω—É —Å–ø–∏—á–∫—É.",
                                  bg=themes[current_theme]["bg_color"], fg=themes[current_theme]["fg_color"], font=("Comic Sans MS", 14, "italic"))
    instructions_label.pack(pady=10)

    start_button = tk.Button(welcome_window, text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", command=welcome_window.destroy,
                             bg=themes[current_theme]["button_bg"], fg=themes[current_theme]["fg_color"], font=("Comic Sans MS", 14, "bold"), relief=tk.RAISED)
    start_button.pack(pady=20)

    theme_button = tk.Button(welcome_window, text="–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", command=switch_theme,
                             bg=themes[current_theme]["button_bg"], fg=themes[current_theme]["fg_color"], font=("Comic Sans MS", 14, "bold"), relief=tk.RAISED)
    theme_button.pack(pady=10)

    exit_button = tk.Button(welcome_window, text="–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã", command=root.quit,
                            bg="#FF4500", fg="#FFFFFF", font=("Helvetica", 12), relief=tk.RAISED)
    exit_button.pack(pady=10)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
root.after(100, show_welcome_menu)
welcome_window = None

canvas = tk.Canvas(root, width=400, height=400, bg=themes[current_theme]["canvas_bg"],
                   highlightthickness=0)  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
canvas.pack(pady=20)

CELL_SIZE = 100
MATCH_WIDTH = 10
MATCH_COLOR = '#FFA500'
END_COLOR = '#FF6347'

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—á–µ–∫
matches = []
selected_match = None
drag_start = None
move_count = 0
nodes = []  # –£–∑–ª—ã –¥–ª—è "–º–∞–≥–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏"

# –°–ø–∏—á–∫–∏


class Match:
    def __init__(self, x1, y1, x2, y2):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        self.original_position = (x1, y1, x2, y2)

    def draw(self):
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã —Å–ø–∏—á–µ–∫
        canvas.create_line(self.x1, self.y1, self.x2, self.y2,
                           width=MATCH_WIDTH, fill=MATCH_COLOR, capstyle=tk.ROUND)
        canvas.create_oval(self.x1 - MATCH_WIDTH//2, self.y1 - MATCH_WIDTH//2,
                           self.x1 + MATCH_WIDTH//2, self.y1 + MATCH_WIDTH//2, fill=END_COLOR)
        canvas.create_oval(self.x2 - MATCH_WIDTH//2, self.y2 - MATCH_WIDTH//2,
                           self.x2 + MATCH_WIDTH//2, self.y2 + MATCH_WIDTH//2, fill=END_COLOR)

    def is_point_inside(self, x, y):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–æ—á–∫–∞ –Ω–∞ —Å–ø–∏—á–∫—É.
        """
        dist_to_line = self.distance_to_line(x, y)
        return dist_to_line < MATCH_WIDTH // 2

    def distance_to_line(self, x, y):
        """
        –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ç–æ—á–∫–∏ –¥–æ –ª–∏–Ω–∏–∏.
        """
        A = x - self.x1
        B = y - self.y1
        C = self.x2 - self.x1
        D = self.y2 - self.y1

        dot = A * C + B * D
        len_sq = C * C + D * D
        param = -1
        if len_sq != 0:
            param = dot / len_sq

        if param < 0:
            xx = self.x1
            yy = self.y1
        elif param > 1:
            xx = self.x2
            yy = self.y2
        else:
            xx = self.x1 + param * C
            yy = self.y1 + param * D

        dx = x - xx
        dy = y - yy
        return math.sqrt(dx * dx + dy * dy)

    def move(self, dx, dy):
        self.x1 += dx
        self.y1 += dy
        self.x2 += dx
        self.y2 += dy

    def snap_to_nodes(self):
        """
        –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–Ω—Ü–æ–≤ —Å–ø–∏—á–∫–∏ –∫ –±–ª–∏–∂–∞–π—à–∏–º —É–∑–ª–∞–º.
        """
        self.x1, self.y1 = self.closest_node(self.x1, self.y1)
        self.x2, self.y2 = self.closest_node(self.x2, self.y2)

    def closest_node(self, x, y):
        """
        –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —É–∑–µ–ª –¥–ª—è –º–∞–≥–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏.
        """
        closest = None
        min_dist = float('inf')
        for nx, ny in nodes:
            dist = math.sqrt((x - nx) ** 2 + (y - ny) ** 2)
            if dist < min_dist:
                closest = (nx, ny)
                min_dist = dist
        return closest


def create_grid():
    global matches, nodes
    matches = [
        Match(50, 50, 150, 50), Match(150, 50, 250, 50),
        Match(250, 50, 350, 50),
        Match(50, 150, 150, 150), Match(250, 150, 350, 150),
        Match(50, 250, 150, 250), Match(150, 250, 250, 250),
        Match(250, 250, 350, 250),
        Match(50, 50, 50, 150),
        Match(150, 50, 150, 150), Match(150, 150, 150, 250),
        Match(250, 50, 250, 150), Match(250, 150, 250, 250),
        Match(350, 50, 350, 150), Match(350, 150, 350, 250),
    ]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–∑–ª—ã –¥–ª—è "–º–∞–≥–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏"
    nodes = [
        (50, 50), (150, 50), (250, 50), (350, 50),
        (50, 150), (150, 150), (250, 150), (350, 150),
        (50, 250), (150, 250), (250, 250), (350, 250),
        (50, 350), (150, 350), (250, 350), (350, 350)
    ]


def draw_matches():
    canvas.delete("all")
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–≤–µ—Ç–∞ –∏ —Ç–µ–Ω–µ–π
    for match in matches:
        match.draw()


def on_mouse_press(event):
    global selected_match, drag_start
    x, y = event.x, event.y
    for match in matches:
        if match.is_point_inside(x, y):
            selected_match = match
            drag_start = (x, y)
            break


def on_mouse_move(event):
    global selected_match, drag_start
    if selected_match:
        dx = event.x - drag_start[0]
        dy = event.y - drag_start[1]
        selected_match.move(dx, dy)
        drag_start = (event.x, event.y)
        draw_matches()


def on_mouse_release(event):
    global selected_match, move_count
    if selected_match:
        move_count += 1
        selected_match.snap_to_nodes()
        selected_match = None
        draw_matches()

        if move_count == 1:
            if is_valid_move():
                message_label.config(
                    text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–∑–¥–∞–ª–∏ 6 –∫–≤–∞–¥—Ä–∞—Ç–æ–≤.")
                show_confetti()
            else:
                message_label.config(text="ü§î –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
        elif move_count > 1:
            message_label.config(text="üï≥Ô∏è –í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å–ø–∏—á–∫–∏.")


def show_confetti():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –æ—â—É—â–µ–Ω–∏—è —É—Å–ø–µ—Ö–∞.
    """
    confetti_items = []
    for _ in range(200):
        x = random.randint(0, root.winfo_width())
        y = random.randint(0, root.winfo_height())
        color = random.choice(['#FF69B4', '#FFD700', '#7CFC00', '#00BFFF'])
        confetti = canvas.create_oval(
            x, y, x + 5, y + 5, fill=color, outline="")
        confetti_items.append(confetti)

    def animate_confetti():
        for confetti in confetti_items:
            dx = random.randint(-5, 5)
            dy = random.randint(2, 10)
            canvas.move(confetti, dx, dy)
        root.after(50, animate_confetti)

    animate_confetti()
    root.after(3000, draw_matches)  # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ —Å–ø—É—Å—Ç—è 3 —Å–µ–∫—É–Ω–¥—ã


def restart_game():
    global move_count
    move_count = 0
    create_grid()
    draw_matches()
    message_label.config(text="")


def is_valid_move():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏ —Å–ø–∏—á–∫—É –∏ —Å–æ–∑–¥–∞–ª–∏ 5 –∫–≤–∞–¥—Ä–∞—Ç–æ–≤.
    """
    squares = 0
    for i in range(3):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3x3 –∫–≤–∞–¥—Ä–∞—Ç–∞
        for j in range(3):
            if (
                any(m.x1 == j * CELL_SIZE + 50 and m.y1 == i * CELL_SIZE + 50 and m.x2 == (j + 1) * CELL_SIZE + 50 and m.y2 == i * CELL_SIZE + 50 for m in matches) and
                any(m.x1 == j * CELL_SIZE + 50 and m.y1 == i * CELL_SIZE + 50 and m.x2 == j * CELL_SIZE + 50 and m.y2 == (i + 1) * CELL_SIZE + 50 for m in matches) and
                any(m.x1 == (j + 1) * CELL_SIZE + 50 and m.y1 == i * CELL_SIZE + 50 and m.x2 == (j + 1) * CELL_SIZE + 50 and m.y2 == (i + 1) * CELL_SIZE + 50 for m in matches) and
                any(m.x1 == j * CELL_SIZE + 50 and m.y1 == (i + 1) * CELL_SIZE + 50 and m.x2 ==
                    (j + 1) * CELL_SIZE + 50 and m.y2 == (i + 1) * CELL_SIZE + 50 for m in matches)
            ):
                squares += 1
    return squares == 5


# –ú–µ—Ç–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
message_label = tk.Label(root, text="", bg=themes[current_theme]["bg_color"],
                         fg=themes[current_theme]["fg_color"], font=("Comic Sans MS", 16, "bold"))
message_label.pack()

# –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
restart_button = tk.Button(root, text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", command=restart_game,
                           bg=themes[current_theme]["button_bg"], fg=themes[current_theme]["fg_color"], font=("Helvetica", 12), relief=tk.RAISED)
restart_button.pack(pady=10)

# –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
exit_button_in_game = tk.Button(root, text="–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é", command=show_welcome_menu,
                                bg=themes[current_theme]["button_exit_bg"], fg=themes[current_theme]["fg_color"], font=("Helvetica", 12), relief=tk.RAISED)
exit_button_in_game.pack(pady=10)

# –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
canvas.bind("<ButtonPress-1>", on_mouse_press)
canvas.bind("<B1-Motion>", on_mouse_move)
canvas.bind("<ButtonRelease-1>", on_mouse_release)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
create_grid()
draw_matches()

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
apply_theme()

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
root.mainloop()
